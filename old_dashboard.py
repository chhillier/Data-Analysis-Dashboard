# dashboard.py
import streamlit as st
import requests
import pandas as pd # Might be useful later for displaying other data
# io might be needed if you were handling raw bytes in a more complex way,
# but st.image can often handle bytes directly.
# import io 
from typing import List, Dict, Any, Optional

# --- Configuration ---
FASTAPI_BASE_URL = "http://localhost:8000/api" # Ensure this matches your FastAPI server

st.set_page_config(layout="wide", page_title="Data Analysis Dashboard")
st.title("ðŸ“Š Data Analysis Dashboard")

st.sidebar.header("Controls")

# --- Section for Static Plots Dashboard ---
st.header("Static Plot Dashboard")

# For a first test, let's use a predefined plot configuration list
# This is similar to what you had in the __main__ block of static_plots.py
# Make sure these column names exist in your diamonds.csv after processing by DataManager
# (e.g., 'price_per_carat' should be created by _post_process_data)
# In dashboard.py, update this list:

default_plot_configurations = [
    {
        'type': 'histogram',
        'params': {
            'col_name': 'carat', 
            'bins': 50, 
            'kde': True, 
            'color': 'cornflowerblue', # Explicitly from PlotParameter
            'edgecolor': 'black',      # Explicitly from PlotParameter
            'linewidth': 1             # Explicitly from PlotParameter
        }
    },
    {
        'type': 'kde',
        'params': {
            'col_name': 'price', 
            'hue_col': 'cut', 
            'fill': True, 
            'alpha': 0.7,              # Explicitly from PlotParameter
            'linewidth': 1.5,          # Explicitly from PlotParameter
            'palette': 'viridis'       # Explicitly from PlotParameter
        }
    },
    {
        'type': 'scatter',
        'params': {
            'col_name_x': 'carat', 
            'col_name_y': 'price', 
            'hue_col': 'clarity', 
            'alpha': 0.4,              # Explicitly from PlotParameter
            's': 30,                   # Marker size, from PlotParameter
            'edgecolor': 'w',          # Edge color for markers, from PlotParameter
            'linewidth': 0.5           # Linewidth for marker edges
        }
    },
    {
        'type': 'bar_chart',
        'params': { # Ensure 'price_per_carat' is generated by DataManager if you use it
            'x_col': 'color', 
            'y_col': 'price', # Using 'price' directly, or 'price_per_carat'
            'hue_col': 'cut', 
            'estimator': 'median', 
            'errorbar': ('ci', 95),    # Explicitly from PlotParameter
            'palette': 'magma',        # Explicitly from PlotParameter
            'saturation': 0.85         # Explicitly from PlotParameter
        }
    },
    {
        'type': 'count_plot',
        'params': {
            'x_col': 'clarity', 
            'hue_col': 'cut', 
            'dodge': True,             # Explicitly from PlotParameter
            'palette': 'coolwarm',     # Explicitly from PlotParameter
            'edgecolor': 'grey'
        }
    },
    {
        'type': 'crosstab_heatmap',
        'params': {
            'index_names_ct': ['cut'], 
            'column_names_ct': ['color'], 
            'annot': True, 
            'fmt': '.0f',              # Format annotations as integers
            'cmap': 'YlGnBu',          # Colormap
            'heatmap_linewidths': 0.5, # Specific to heatmap from PlotParameter
            'cbar': True               # Show colorbar, from PlotParameter
        }
    }
]

# Button to generate the dashboard plot
if st.sidebar.button("Generate Dashboard Plot", key="gen_dashboard_plot"):
    endpoint_url = f"{FASTAPI_BASE_URL}/plots/dashboard"
    
    # For now, we are not sending include_columns or exclude_columns from UI
    # The API endpoint has them as Query(None), so they will be None by default.
    # We are sending the plot_configurations in the request body.
    
    st.info(f"Requesting dashboard plot from: {endpoint_url}")
    st.json({"plot_configurations": default_plot_configurations}) # Show what we're sending

    try:
        with st.spinner("Generating dashboard plot... please wait."):
            response = requests.post(endpoint_url, json=default_plot_configurations) 
            # Note: FastAPI expects a list directly, not a dict like {"plot_configurations": ...}
            # So, just requests.post(endpoint_url, json=default_plot_configurations)

        if response.status_code == 200:
            st.image(response.content, caption="Generated Dashboard Plot", use_container_width=True)
            st.success("Dashboard plot generated successfully!")
        else:
            st.error(f"Error generating dashboard plot: {response.status_code}")
            try:
                error_detail = response.json() # Try to get JSON error detail
                st.json(error_detail)
            except requests.exceptions.JSONDecodeError:
                st.text_area("Raw error response:", response.text, height=200)

    except requests.exceptions.RequestException as e:
        st.error(f"Connection error to API: {e}")
    except Exception as e:
        st.error(f"An unexpected error occurred: {e}")

st.markdown("---") # Separator

# --- Placeholder for other sections (e.g., displot, descriptive stats) ---
st.header("Individual Displot (Example)")

# Example: UI for displot - you can expand this
# First, get column names from the API for selectboxes
columns_endpoint = f"{FASTAPI_BASE_URL}/data/columns"
try:
    col_response = requests.get(columns_endpoint)
    if col_response.status_code == 200:
        available_columns = col_response.json().get("all_columns", [])
        numerical_cols = col_response.json().get("numerical_columns", [])
        categorical_cols = col_response.json().get("categorical_columns", [])
    else:
        st.warning("Could not fetch column names for selectors.")
        available_columns = ["price", "carat", "depth"] # Fallback
        numerical_cols = ["price", "carat", "depth"]
        categorical_cols = ["cut", "color", "clarity"]

except requests.exceptions.RequestException:
    st.warning("API for column names not reachable.")
    available_columns = ["price", "carat", "depth"] # Fallback
    numerical_cols = ["price", "carat", "depth"]
    categorical_cols = ["cut", "color", "clarity"]


selected_col_displot = st.sidebar.selectbox(
    "Select column for Displot:", 
    numerical_cols, # Typically displot is for numerical data
    index=0 if "price" in numerical_cols else 0
)
selected_kind_displot = st.sidebar.selectbox(
    "Select Displot kind:", 
    ["hist", "kde", "ecdf"], 
    index=0
)
selected_hue_displot = st.sidebar.selectbox(
    "Select Hue column for Displot (optional):", 
    [None] + categorical_cols, # Add None option
    index=0
)

if st.sidebar.button("Generate Displot", key="gen_displot"):
    displot_endpoint_url = f"{FASTAPI_BASE_URL}/plots/displot"
    params = {
        "col_name": selected_col_displot,
        "kind": selected_kind_displot,
    }
    if selected_hue_displot:
        params["hue_col"] = selected_hue_displot
    
    # include_columns/exclude_columns can be added here if you have UI for them
    # params["include_columns"] = [...] 
    
    st.info(f"Requesting displot from: {displot_endpoint_url} with params: {params}")

    try:
        with st.spinner("Generating displot..."):
            response = requests.get(displot_endpoint_url, params=params)
        
        if response.status_code == 200:
            st.image(response.content, caption=f"Displot of {selected_col_displot}", use_container_width=True)
            st.success("Displot generated successfully!")
        else:
            st.error(f"Error generating displot: {response.status_code}")
            try:
                st.json(response.json())
            except requests.exceptions.JSONDecodeError:
                st.text_area("Raw error response:", response.text, height=200)
    except requests.exceptions.RequestException as e:
        st.error(f"Connection error to API: {e}")
    except Exception as e:
        st.error(f"An unexpected error occurred: {e}")